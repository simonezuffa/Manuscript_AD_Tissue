Sys.getenv("CC")
Sys.setenv(CC = "/opt/homebrew/bin/gfortran")
> Sys.getenv("CC")
Sys.setenv(CC = "/opt/homebrew/bin/gfortran")
Sys.getenv("CC")
devtools::install_github("pmartR/pmartR@*release")
devtools::install_github("ricoderks/Rcpm")
library(pacman)
pacman::p_load(c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest","RBGL","edgeR","fgsea","httr","qs"))
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
BiocManager::install("RBGL")
BiocManager::install("fgsea")
BiocManager::install("siggenes")
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
install.packages(c("bslib", "cluster", "crosstalk", "deldir", "diptest", "dplyr", "GGally", "gtools", "htmlwidgets", "insight", "interp", "jqr", "Matrix", "MatrixModels", "mclust", "mvtnorm", "nlme", "pls", "PMCMRplus", "R.utils", "Rfast", "shiny", "sodium", "sp", "stringi", "stringr", "tinytex"))
install.packages(c("bslib", "Cairo", "cluster", "deSolve", "expm", "foreign", "gmp", "interp", "mvtnorm", "ncdf4", "nlme", "qs", "rgl", "robustbase", "Rserve", "scales", "stringfish", "units", "wk", "XML"))
install.packages(c("checkmate", "cluster", "cpp11", "gert", "jqr", "jsonlite", "RcppArmadillo", "Rmpfr", "testthat", "vctrs", "xml2"))
install.packages(c("gert", "jqr", "Rmpfr"))
sixmix_fix_feature_info
install.packages("omicsTools")
devtools::install_github("pmartR/pmartR@*release")
install.packages(c("brew", "brio", "cli", "cowplot", "curl", "data.table", "datawizard", "DBI", "desc", "DiceDesign", "DT", "e1071", "emmeans", "fansi", "filelock", "future", "future.apply", "gdtools", "ggeffects", "ggside", "htmlwidgets", "httpuv", "igraph", "later", "maps", "markdown", "matrixStats", "mgcv", "pcaPP", "pkgbuild", "PMCMRplus", "processx", "progress", "qs", "ragg", "rayimage", "rayrender", "rayvertex", "recipes", "rnaturalearth", "rpart", "RSQLite", "Rtsne", "s2", "sass", "sf", "stringi", "svglite", "tensorA", "terra", "tidygraph", "timeDate", "vipor", "vroom", "xgboost", "yaml", "zCompositions"))
install.packages(c("brew", "brio", "cli", "cowplot", "curl", "data.table", "datawizard", "DBI", "desc", "DiceDesign", "DT", "e1071", "emmeans", "fansi", "filelock", "future", "future.apply", "gdtools", "ggeffects", "ggside", "htmlwidgets", "httpuv", "igraph", "later", "maps", "markdown", "matrixStats", "mgcv", "pcaPP", "pkgbuild", "PMCMRplus", "processx", "progress", "qs", "ragg", "rayimage", "rayrender", "rayvertex", "recipes", "rnaturalearth", "rpart", "RSQLite", "Rtsne", "s2", "sass", "sf", "stringi", "svglite", "tensorA", "terra", "tidygraph", "timeDate", "vipor", "vroom", "xgboost", "yaml", "zCompositions"))
install.packages(c("brew", "brio", "cli", "cowplot", "curl", "data.table", "datawizard", "DBI", "desc", "DiceDesign", "DT", "e1071", "emmeans", "fansi", "filelock", "future", "future.apply", "gdtools", "ggeffects", "ggside", "htmlwidgets", "httpuv", "igraph", "later", "maps", "markdown", "matrixStats", "mgcv", "pcaPP", "pkgbuild", "PMCMRplus", "processx", "progress", "qs", "ragg", "rayimage", "rayrender", "rayvertex", "recipes", "rnaturalearth", "rpart", "RSQLite", "Rtsne", "s2", "sass", "sf", "stringi", "svglite", "tensorA", "terra", "tidygraph", "timeDate", "vipor", "vroom", "xgboost", "yaml", "zCompositions"))
install.packages(c("brew", "brio", "cli", "cowplot", "curl", "data.table", "datawizard", "DBI", "desc", "DiceDesign", "DT", "e1071", "emmeans", "fansi", "filelock", "future", "future.apply", "gdtools", "ggeffects", "ggside", "htmlwidgets", "httpuv", "igraph", "later", "maps", "markdown", "matrixStats", "mgcv", "pcaPP", "pkgbuild", "PMCMRplus", "processx", "progress", "qs", "ragg", "rayimage", "rayrender", "rayvertex", "recipes", "rnaturalearth", "rpart", "RSQLite", "Rtsne", "s2", "sass", "sf", "stringi", "svglite", "tensorA", "terra", "tidygraph", "timeDate", "vipor", "vroom", "xgboost", "yaml", "zCompositions"))
install.packages(c("castor", "compositions", "patchwork", "phytools", "Rcpp", "RCurl", "zCompositions"))
install.packages("compositions")
install.packages(c("BH", "compositions", "DBI", "digest", "expm", "gbm", "ggrepel", "ggstatsplot", "glue", "gmp", "graphlayouts", "MASS", "Matrix", "pkgload", "plotly", "ps", "readr", "reprex", "rlang", "roxygen2", "statsExpressions", "timechange", "uuid", "withr", "yardstick"))
install.packages(c("BayesFactor", "bs4Dash", "cowplot", "emmeans", "hoardr", "MALDIquant", "R.oo", "roxygen2", "tidyr"))
remotes::install_github("kevinmildau/homologueDiscoverer")
install.packages("MassTools")
remotes::install_github("tidymass/masstools")
remotes::install_github("kevinmildau/homologueDiscoverer")
remotes::install_github("mjhelf/MassTools")
remotes::install_github("kevinmildau/homologueDiscoverer")
install.packages("xgboost")
install.packages(c("gdtools", "ggplot2", "mclust", "shape"))
install.packages(c("afex", "bookdown", "boot", "curl", "data.table", "deldir", "gdtools", "ggeffects", "ggraph", "ggsci", "ggside", "hrbrthemes", "lava", "locfit", "officer", "parallelly", "prettymapr", "RcppArmadillo", "RcppEigen", "renv", "rgl", "rmarkdown", "tweenr"))
install.packages(c("ggraph", "santaR", "systemfonts"))
install.packages(c("digest", "globals", "graphlayouts", "multcompView", "qs", "tidyselect", "zCompositions"))
install.packages(c("ggsci", "Hmisc", "igraph", "insight", "parameters", "pkgbuild", "processx", "ragg", "remotes", "sass", "tinytex", "WRS2", "zCompositions"))
install.packages(c("broom.helpers", "broom.mixed", "bslib", "codetools", "data.table", "datawizard", "DT", "effectsize", "future", "future.apply", "ggeffects", "ggstats", "gh", "htmltools", "httpuv", "httr2", "infer", "lme4", "munsell", "promises", "RcppArmadillo", "RSQLite", "shiny", "tidymodels", "WikipediR"))
install.packages(c("emmeans", "ggstatsplot", "knitr", "RcppArmadillo"))
install.packages(c("lme4", "RcppArmadillo"))
install.packages(c("ggfortify", "ggplot2", "gtable", "labelled", "openssl", "pkgdown", "survival", "tune"))
install.packages(c("brio", "fs", "xopen"))
install.packages(c("mclust", "pixmap", "sp"))
install.packages(c("BiocManager", "officer", "ragg", "RcppArmadillo", "stringi", "tinytex"))
install.packages(c("backports", "broom", "cachem", "effectsize", "emmeans", "estimability", "farver", "fastmap", "ggeffects", "ggsci", "highr", "Hmisc", "insight", "KernSmooth", "minqa", "mvtnorm", "openssl", "parameters", "qs", "quantreg", "ragg", "RApiSerialize", "RcppArmadillo", "rmarkdown", "RSQLite", "sjmisc", "sjPlot", "sjstats", "spacefillr", "SparseM", "systemfonts", "terra", "textshaping", "vegan", "xfun"))
install.packages(c("Hmisc", "qs"))
install.packages(c("DBI", "hardhat", "Hmisc", "qs", "RcppArmadillo", "SparseM"))
install.packages(c("correlation", "datawizard", "downlit", "evaluate", "Hmisc", "insight", "markdown", "mc2d", "nlme", "performance", "phytools", "qs", "RcppArmadillo", "rlang", "SparseM", "survival", "waveslim"))
install.packages(c("nlme", "nloptr", "qs", "RcppArmadillo", "robustbase", "SparseM"))
install.packages(c("bookdown", "effectsize", "lme4", "nlme", "nloptr", "ps", "qs", "RcppArmadillo", "recipes", "robustbase", "SparseM", "statsExpressions", "yaml"))
install.packages(c("nlme", "nloptr", "qs", "RcppArmadillo", "robustbase", "SparseM"))
install.packages(c("ggstatsplot", "knitr", "nlme", "nloptr", "pkgdown", "qs", "RcppArmadillo", "RcppParallel", "reprex", "robustbase", "SparseM"))
install.packages(c("nlme", "nloptr", "qs", "RcppArmadillo", "robustbase", "SparseM", "wk"))
install.packages(c("cubature", "datawizard", "httr2", "insight", "nlme", "nloptr", "performance", "qs", "rayimage", "Rcpp", "RcppArmadillo", "robustbase", "s2", "SparseM"))
install.packages(c("clock", "ipred", "nlme", "nloptr", "performance", "qs", "RcppArmadillo", "robustbase", "RSpectra", "s2", "SparseM", "tinytex", "xfun"))
install.packages(c("crul", "datawizard", "gert", "htmlTable", "nlme", "nloptr", "parameters", "qs", "rayvertex", "RcppArmadillo", "robustbase", "RSpectra", "s2", "SparseM"))
install.packages(c("bayestestR", "colorspace", "gert", "nlme", "nloptr", "polyclip", "qs", "RcppArmadillo", "robustbase", "RSpectra", "s2", "SparseM", "xgboost", "yaml"))
install.packages(c("bitops", "bslib", "checkmate", "future", "gert", "nlme", "nloptr", "parallelly", "qs", "rayrender", "RcppArmadillo", "robustbase", "RSpectra", "s2", "SparseM", "usethis", "uuid"))
install.packages(c("dials", "gert", "nlme", "nloptr", "pls", "qs", "rayrender", "RcppArmadillo", "robustbase", "RSpectra", "s2", "shiny", "SparseM", "withr"))
install.packages(c("gert", "nlme", "nloptr", "qs", "RcppArmadillo", "robustbase", "RSpectra", "s2", "SparseM"))
install.packages(c("gert", "nlme", "nloptr", "pcaPP", "qs", "RcppArmadillo", "robustbase", "RSpectra", "s2", "SparseM"))
install.packages(c("corrplot", "digest", "expm", "fastDummies", "fBasics", "gert", "golem", "insight", "jqr", "minqa", "mvtnorm", "ncdf4", "nlme", "nloptr", "openssl", "pcaPP", "qs", "RcppArmadillo", "RcppEigen", "rmarkdown", "robustbase", "rrcov", "RSpectra", "s2", "SparseM", "stabledist", "xfun"))
install.packages(c("BiocManager", "boot", "broom.helpers", "cpp11", "curl", "data.table", "emmeans", "EnvStats", "expm", "fBasics", "gdtools", "gert", "gmp", "golem", "httr2", "jqr", "jtools", "MALDIquant", "minqa", "mvtnorm", "ncdf4", "nlme", "nloptr", "openssl", "pcaPP", "qs", "RANN", "RcppArmadillo", "RcppEigen", "RcppParallel", "robustbase", "rrcov", "RSpectra", "s2", "shapviz", "SparseM", "taxize", "vegan", "waldo"))
install.packages(c("expm", "fBasics", "gdtools", "gert", "gmp", "jqr", "minqa", "mvtnorm", "ncdf4", "nlme", "nloptr", "openssl", "pcaPP", "qs", "RcppArmadillo", "RcppEigen", "robustbase", "rrcov", "RSpectra", "s2", "SparseM", "vegan"))
install.packages(c("afex", "bs4Dash", "cards", "datawizard", "expm", "fBasics", "gdtools", "gert", "ggeffects", "gmp", "insight", "jqr", "minqa", "mvtnorm", "ncdf4", "nlme", "nloptr", "openssl", "pcaPP", "performance", "qs", "RcppArmadillo", "RcppEigen", "robustbase", "rrcov", "RSpectra", "s2", "SparseM", "SuppDists", "vegan"))
install.packages(c("abind", "bit", "bit64", "bitops", "broom", "car", "cards", "caTools", "curl", "Deriv", "e1071", "evaluate", "expm", "fBasics", "gdtools", "gert", "ggrepel", "ggstats", "glue", "gmp", "graphlayouts", "hexbin", "httr2", "insight", "jqr", "jsonlite", "matrixStats", "microbenchmark", "minqa", "mvtnorm", "ncdf4", "nlme", "nloptr", "openssl", "parameters", "patchwork", "pcaPP", "phangorn", "pkgdown", "pls", "PMCMRplus", "profvis", "ps", "qs", "ragg", "randomForest", "RApiSerialize", "raster", "RcppArmadillo", "RcppEigen", "renv", "reticulate", "rjson", "robustbase", "rrcov", "RSpectra", "rsvg", "s2", "sandwich", "sf", "shapviz", "SparseM", "statsExpressions", "timeDate", "timeSeries", "tinytex", "vegan", "wk", "xfun"))
install.packages(c("askpass", "commonmark", "credentials", "expm", "fBasics", "gdtools", "gert", "gmp", "hexbin", "jqr", "minqa", "mvtnorm", "ncdf4", "nlme", "nloptr", "openssl", "pcaPP", "phangorn", "PMCMRplus", "qs", "ragg", "randomForest", "RcppArmadillo", "RcppEigen", "robustbase", "rrcov", "RSpectra", "rsvg", "s2", "sf", "sodium", "SparseM", "sys", "vegan"))
install.packages(c("datawizard", "expm", "fBasics", "gdtools", "gert", "gmp", "gplots", "hexbin", "jqr", "minqa", "mvtnorm", "ncdf4", "nlme", "nloptr", "openssl", "pcaPP", "phangorn", "PMCMRplus", "qs", "ragg", "randomForest", "RcppArmadillo", "RcppEigen", "renv", "robustbase", "rrcov", "RSpectra", "rsvg", "s2", "sf", "sodium", "SparseM", "vegan"))
install.packages(c("bayestestR", "bookdown", "broom.mixed", "corrplot", "data.table", "doBy", "emmeans", "evaluate", "expm", "fBasics", "gdtools", "gert", "ggeffects", "gmp", "gss", "hexbin", "jqr", "minqa", "modelenv", "mvtnorm", "ncdf4", "nlme", "nloptr", "officer", "openssl", "parameters", "pcaPP", "performance", "phangorn", "PMCMRplus", "qs", "ragg", "randomForest", "RcppArmadillo", "RcppEigen", "renv", "robustbase", "rrcov", "RSpectra", "rstudioapi", "rsvg", "s2", "sf", "shapviz", "sodium", "SparseM", "terra", "vegan", "wk"))
# Load required libraries
library(tidymodels)
library(tidyverse)
library(ranger)
library(vip)
library(SHAPforxgboost)
# Set seed for reproducibility
set.seed(42)
# Function to create train-test split and preprocessing
create_splits <- function(data, target_col, split_prop = 0.8) {
# Create the initial split
initial_split <- initial_split(data, prop = split_prop, strata = !!sym(target_col))
# Create the training and testing sets
train_data <- training(initial_split)
test_data <- testing(initial_split)
# Create cross-validation folds
cv_folds <- vfold_cv(train_data, v = 5, strata = !!sym(target_col))
# Create the recipe
model_recipe <- recipe(formula = as.formula(paste(target_col, "~ .")),
data = train_data) %>%
step_normalize(all_predictors()) %>%
step_zv(all_predictors())
return(list(
train_data = train_data,
test_data = test_data,
cv_folds = cv_folds,
recipe = model_recipe
))
}
# Function to define model specification and workflow
create_rf_workflow <- function() {
# Define the model specification
rf_spec <- rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_engine("ranger", importance = "permutation") %>%
set_mode("classification")
# Create the workflow
rf_workflow <- workflow() %>%
add_model(rf_spec)
return(rf_workflow)
}
# Function to perform hyperparameter tuning
tune_rf_model <- function(workflow, recipe, cv_folds) {
# Define the parameter grid
rf_grid <- grid_random(
mtry() %>% range_set(c(3, 8)),
trees() %>% range_set(c(100, 1000)),
min_n() %>% range_set(c(2, 10)),
size = 30
)
# Add recipe to workflow
workflow <- workflow %>%
add_recipe(recipe)
# Tune the model
rf_tuning <- workflow %>%
tune_grid(
resamples = cv_folds,
grid = rf_grid,
metrics = metric_set(accuracy, roc_auc, precision, recall),
control = control_grid(save_pred = TRUE)
)
return(rf_tuning)
}
# Function to analyze tuning results
analyze_tuning_results <- function(tuning_results) {
# Show best results
best_results <- tuning_results %>%
show_best(metric = "accuracy", n = 5)
print("Top 5 models by accuracy:")
print(best_results)
# Create visualization of parameter impact
tuning_results %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(mean, mtry, trees, min_n) %>%
pivot_longer(cols = c(mtry, trees, min_n),
names_to = "parameter",
values_to = "value") %>%
ggplot(aes(value, mean)) +
geom_point(alpha = 0.5) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = "Parameter Value", y = "Mean Accuracy") +
theme_bw()
return(best_results)
}
# Function to finalize model with best parameters
finalize_model <- function(workflow, tuning_results, train_data) {
# Get best parameters
best_params <- tuning_results %>%
select_best(metric = "accuracy")
# Finalize workflow
final_workflow <- workflow %>%
finalize_workflow(best_params)
# Fit the final model
final_model <- final_workflow %>%
fit(data = train_data)
return(final_model)
}
# Function to evaluate model performance
evaluate_model <- function(final_model, test_data, target_col) {
# Make predictions
predictions <- predict(final_model, test_data) %>%
bind_cols(test_data)
# Calculate metrics
metrics <- predictions %>%
metrics(truth = !!sym(target_col), estimate = .pred_class)
# Create confusion matrix
conf_mat <- predictions %>%
conf_mat(truth = !!sym(target_col), estimate = .pred_class)
# Plot confusion matrix
conf_mat %>%
autoplot(type = "heatmap")
return(list(
metrics = metrics,
conf_mat = conf_mat
))
}
# Function to analyze feature importance
analyze_feature_importance <- function(final_model, train_data) {
# Extract feature importance
importance <- final_model %>%
extract_fit_parsnip() %>%
vip(num_features = 20)
# Plot feature importance
print(importance)
# Calculate SHAP values (if possible with the data)
# Note: This requires the data to be in the correct format
tryCatch({
model_fit <- final_model %>%
extract_fit_engine()
# Prepare data for SHAP calculation
pred_data <- train_data %>%
select(-target) %>%
as.matrix()
shap_values <- ranger.unify(model_fit, pred_data)
# Plot SHAP summary
shap.plot.summary(shap_values)
}, error = function(e) {
message("Could not calculate SHAP values. This might be due to data format issues.")
})
return(importance)
}
# Main execution function
run_rf_analysis <- function(data, target_col) {
# Split data and create recipe
splits <- create_splits(data, target_col)
# Create workflow
rf_workflow <- create_rf_workflow()
# Tune model
tuning_results <- tune_rf_model(rf_workflow, splits$recipe, splits$cv_folds)
# Analyze tuning results
best_results <- analyze_tuning_results(tuning_results)
# Finalize model
final_model <- finalize_model(rf_workflow, tuning_results, splits$train_data)
# Evaluate model
evaluation <- evaluate_model(final_model, splits$test_data, target_col)
# Analyze feature importance
importance <- analyze_feature_importance(final_model, splits$train_data)
return(list(
model = final_model,
evaluation = evaluation,
importance = importance,
tuning_results = tuning_results
))
}
# Example with built-in dataset
data(iris)
results <- run_rf_analysis(iris, "Species")
setwd("~/OneDrive - University of California, San Diego Health/Projects/MPRINT_Sierra")
library(tidyverse)
library(readxl)
data_brain <- read_excel("Metadata_Box.xlsx", sheet = "Brain") %>%
dplyr::mutate(Type = gsub(".*_", "", SampleID)) %>%
dplyr::mutate(UniqueID = gsub("_[^_]*$", "", SampleID))
brain_info <- data_brain %>% group_by(UniqueID) %>%
summarise(count = n())
data_serum <- read_excel("Metadata_Box.xlsx", sheet = "Serum")
serum_info <- data_serum %>% group_by(SampleID) %>%
summarise(count = n())
data_liver <- read_excel("Metadata_Box.xlsx", sheet = "Liver")
liver_info <- data_liver %>% group_by(SampleID) %>%
summarise(count = n())
# Metadata provided by Sierra
brain_punches <- read_excel("BrainPunchNumbers.xlsx")
View(data_brain)
View(data_brain)
View(brain_info)
View(liver_info)
View(data_serum)
data_serum <- read_excel("Metadata_Box.xlsx", sheet = "Serum") %>%
dplyr::filter(Type == "Serum")
serum_info <- data_serum %>% group_by(SampleID) %>%
summarise(count = n())
View(serum_info)
View(liver_info)
data_serum <- read_excel("Metadata_Box.xlsx", sheet = "Serum")
setwd("~/OneDrive - University of California, San Diego Health/Projects/Caltech/Data/sample_brain")
library(tidyverse)
library(mixOmics)
library(ggpubr)
library(vegan)
library(caret)
library(limma)
library(patchwork)
library(rstatix)
library(Spectra)
library(MsBackendMgf)
library(UpSetR)
library(Rtsne)
library(effsize)
# Read in data
feature_table <- read_csv("gnps_quant_brain.csv")
metadata <- read_csv("meta_brain.csv")
sample_order <- read.csv("sequence_brain.csv")
annotations <- read.delim("fbmn_gnps2/nf_output/library/merged_results_with_gnps.tsv") %>%
dplyr::filter(!str_detect(pattern = "REFRAME", LibraryName)) # remove drug library
annotations$X.Scan. <- as.character(annotations$X.Scan.)
canopus <- read_tsv("canopus_brain.tsv") %>% dplyr::select(1,3,5,7,9)
canopus$id <- gsub("^.*sirius_", "", canopus$id)
sample_order$Plate <- gsub("^(.*?):.*", "\\1", sample_order$Position)
info_feature <- feature_table %>% dplyr::select(1:3,7)
colnames(info_feature) <- c("Feature", "mz", "RT", "Corr_ID")
info_feature$Feature <- as.character(info_feature$Feature)
info_feature_complete <- info_feature %>%
left_join(annotations, by = c("Feature" = "X.Scan.")) %>%
dplyr::select(1:4,18,24) %>%
left_join(canopus %>% distinct(id, .keep_all = TRUE), by = c("Feature" = "id"))
# Data table
data <- feature_table %>%
column_to_rownames("row ID") %>% dplyr::select(contains("Peak")) %>%
t() %>% as.data.frame() %>% rownames_to_column("SampleID") %>%
arrange(SampleID) %>% distinct(SampleID, .keep_all = TRUE)
data$SampleID <- gsub(".mzML Peak area", "", data$SampleID)
# Metadata
metadata_metabolomics <- data_frame(SampleID = data$SampleID) %>%
left_join(metadata, by = c("SampleID" = "Alias")) %>%
left_join(sample_order, by = c("SampleID" = "File.Name")) %>%
dplyr::select(-c("sample_type", "intervention", "Inj.Vol")) %>%
dplyr::mutate(Colonized = case_when(str_detect(pattern = "GF", mouse_strain) ~ "GF",
str_detect(pattern = "SPF", mouse_strain) ~ "SPF",
str_detect(pattern = "Blank_", SampleID) ~ "Blank",
str_detect(pattern = "Pool_qc_", SampleID) ~ "Pool",
str_detect(pattern = "sixmix_", SampleID) ~ "SixMix",
str_detect(pattern = "srm_", SampleID) ~ "SRM",
TRUE ~ "blank/qc")) %>%
dplyr::mutate(Study = case_when(str_detect(pattern = "GF HET|SPF HET|GF WT|SPF WT", mouse_strain) ~ "5xFAD",
str_detect(pattern = "GF 3XTG|SPF 3XTG|GF B6|SPF B6", mouse_strain) ~ "3xTG",
str_detect(pattern = "Blank_", SampleID) ~ "Blank",
str_detect(pattern = "Pool_qc_", SampleID) ~ "Pool",
str_detect(pattern = "sixmix_", SampleID) ~ "SixMix",
str_detect(pattern = "srm_", SampleID) ~ "SRM",
TRUE ~ "blank/qc")) %>%
dplyr::mutate(Strain = case_when(str_detect(pattern = "WT|B6", mouse_strain) ~ "WT",
str_detect(pattern = "3XTG|HET", mouse_strain) ~ "Mut",
str_detect(pattern = "Blank_", SampleID) ~ "Blank",
str_detect(pattern = "Pool_qc_", SampleID) ~ "Pool",
str_detect(pattern = "sixmix_", SampleID) ~ "SixMix",
str_detect(pattern = "srm_", SampleID) ~ "SRM",
TRUE ~ "blank/qc"))
View(metadata)
View(metadata_metabolomics)
